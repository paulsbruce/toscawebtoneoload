trigger: none

pool:
  vmImage: 'ubuntu-18.04'

parameters:
- name: scenario
  displayName: NeoLoad Scenario
  type: string
  default: adhoc
  values:
  - adhoc
  - sanityTOSCA
  - fullTOSCA
- name: duration
  displayName: "Adhoc: Test Duration (Mins)"
  type: number
  default: 2
- name: vus
  displayName: "Adhoc: Test VUs (as License Permits)"
  type: number
  default: 5
- name: max_sla_failure_percent
  displayName: Max SLA Failure Percent (0-100)
  type: number
  default: 25

variables:
  neoloadToken: $(secret_nlw_token)
  neoloadApiUrl: 'https://neoload-web-api.neotys.perfreleng.org/'
  workspaceId: '5fd12022430f780001e3fb61'
  zoneId: 'wNBKe'
  PYTHONUNBUFFERED: 1

jobs:
- job: RunLoadTest
  displayName: Run NeoLoad Test from Azure Devops
  steps:
  - checkout: self

  - task: UsePythonVersion@0
    inputs:
      versionSpec: '3.8'

  - task: Bash@3
    displayName: Install NeoLoad and Auth
    continueOnError: false
    inputs:
      targetType: 'inline'
      script: |
        echo "Installing NeoLoad from Pypi Live (~20sec); if you don't want to do this, bake the NeoLoad CLI in to your worker image!"
        pip install -q neoload
        neoload --version
        neoload login --url $(neoloadApiUrl) --workspace $(workspaceId) $(neoloadToken)


  - task: Bash@3
    displayName: Configure the NeoLoad test
    continueOnError: false
    inputs:
      targetType: 'inline'
      script: |
        set +x

        DYN_SCENARIO_FILE=$(Build.SourcesDirectory)/actual-scenario.yaml
        cp yaml/scenario.template $DYN_SCENARIO_FILE
        sed -i 's/\[\[max_users\]\]/${{ parameters.vus }}/g' $DYN_SCENARIO_FILE
        sed -i 's/\[\[max_duration\]\]/${{ parameters.duration }}m/g' $DYN_SCENARIO_FILE

        #cat ./actual-scenario.yaml

        neoload validate .

        vus_per_lg_estimate=300
        (( NUM_LGS=(${{ parameters.vus }}+$vus_per_lg_estimate-1)/$vus_per_lg_estimate ))
        echo "Estimated # of LGs ($vus_per_lg_estimate/LG): $NUM_LGS"

        neoload test-settings --zone $(zoneId) --lgs $NUM_LGS --scenario ${{ parameters.scenario }} createorpatch "TOSCANeoLoadFromAzure" \
                project --path $(Build.SourcesDirectory) upload "TOSCANeoLoadFromAzure"

  - task: Bash@3
    displayName: Run the NeoLoad test
    continueOnError: true
    inputs:
      targetType: 'inline'
      script: |
        set +x
        (( LICENSE_VUS=${{ parameters.vus }}+1 ))
        echo "License VUs: $LICENSE_VUS"
        if [ "${{ parameters.scenario }}" -eq "adhoc" ]; then VUS_ARG="--web-vu $LICENSE_VUS"; fi

        neoload --debug run --name "TOSCANeoLoadFromAzure_$(Build.BuildNumber)" \
                    --description "Azure example with meta; $(Build.BuildUri)" \
                    --scenario ${{ parameters.scenario }} \
                    --as-code actual-scenario.yaml,yaml/slas.template.nl.yaml \
                    --detached $VUS_ARG
        sleep 10

  - task: Bash@3
    displayName: Wait for fastfail or finish signals
    continueOnError: true
    inputs:
      targetType: 'inline'
      script: |
        { sleep 120; neoload fastfail --max-failure ${{ parameters.max_sla_failure_percent }} slas cur; } &
        neoload wait cur

  - task: Bash@3
    displayName: Get the junit SLA report
    continueOnError: false
    inputs:
      targetType: 'inline'
      script: |
       neoload test-results --junit-file $(Common.TestResultsDirectory)/neoload-slas.xml junitsla

  - task: Bash@3
    displayName: Get the Transactions CSV file
    continueOnError: false
    inputs:
      targetType: 'inline'
      script: |
       neoload report --template builtin:transactions-csv --out-file $(Common.TestResultsDirectory)/transactions.csv

  - task: ArchiveFiles@2
    inputs:
      rootFolderOrFile: '$(Common.TestResultsDirectory)/transactions.csv' 
      includeRootFolder: false
      archiveType: 'zip'
      archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip' 
      replaceExistingArchive: true 

  - task: PublishBuildArtifacts@1
    inputs:
      pathToPublish: '$(Common.TestResultsDirectory)/transactions.csv'
      artifactName: transactions.csv

  - task: PublishTestResults@2
    inputs:
      testResultsFormat: 'JUnit'
      testResultsFiles: $(Common.TestResultsDirectory)/neoload-slas.xml
      failTaskOnFailedTests: true
